<?php 


/*
//32 bit
2 ^ 31 - 1  = -2147483647 to +2147483647

//64 bit
2 ^ 63 - 1  = -9223372036854775807 to +9223372036854775807



//Integer overflow 
$large_number = 50000000000000000000;
var_dump($large_number);
5.0E+19  = 5.0 * 10^19


*/

//Integer division 
var_dump(25/7); 

var_dump((int) (25/7));

var_dump(round(25/7));


//Converting to integer

var_dump(25/7); 
var_dump((int) (25/7));

















/*PHP-তে integer (int) টাইপ এমন একটি সংখ্যা যা পূর্ণসংখ্যা হিসেবে গণ্য করা হয়, যেমন {..., -2, -1, 0, 1, 2, ...}।

integer (int) সংক্রান্ত বিস্তারিত
সংখ্যা বিভিন্নভাবে প্রকাশ করা যায়:

decimal (দশমিক): 1234 (দশমিক সংখ্যা)
octal (অক্টাল): 0123 বা 0o123 (৮ ভিত্তিক সংখ্যা)
hexadecimal (হেক্সাডেসিমাল): 0x1A (১৬ ভিত্তিক সংখ্যা)
binary (বাইনারি): 0b11111111 (২ ভিত্তিক সংখ্যা)
PHP 7.4.0 থেকে সংখ্যা পড়তে সহজ করার জন্য ডিজিটের মাঝে _ ব্যবহার করা যায়, যা PHP প্রসেস করার সময় মুছে ফেলা হয়। যেমনঃ 1_234_567।

integer এর সীমা এবং আকার:

PHP-এর integer আকার প্ল্যাটফর্মের উপর নির্ভরশীল। সাধারণত, ৩২-বিট সিস্টেমে সর্বোচ্চ মান প্রায় ২ বিলিয়ন (২^৩১), এবং ৬৪-বিট সিস্টেমে প্রায় ৯E১৮ (৯ * ১০^১৮)।
PHP_INT_MAX, PHP_INT_MIN এবং PHP_INT_SIZE কনস্ট্যান্ট ব্যবহার করে integer এর সর্বোচ্চ, সর্বনিম্ন এবং আকার জানা যায়।
integer overflow:

যদি একটি সংখ্যা integer এর সীমা অতিক্রম করে, তাহলে PHP সেটিকে স্বয়ংক্রিয়ভাবে float (দশমিক সংখ্যা) হিসেবে পরিবর্তন করবে।

<?php
$large_number = 50000000000000000000;
var_dump($large_number); // float(5.0E+19)
?>
integer division:

PHP-তে integer ভাগ করার জন্য intdiv() ফাংশন ব্যবহার করতে হয়। 1/2 ফলাফল 0.5 দিবে যা float, কিন্তু int পেতে (int) ব্যবহার করতে পারেন।

<?php
var_dump(25/7);         // float(3.5714285714286)
var_dump((int) (25/7)); // int(3)
var_dump(round(25/7));  // float(4)
?>
integer এ রূপান্তর (Converting to integer):

(int) বা intval() ব্যবহার করে অন্য মানগুলোকে integer এ রূপান্তর করা যায়।
উদাহরণ:

<?php
var_dump((int) 8.1); // 8
var_dump(intval(8.1)); // 8
?>
বিভিন্ন ডাটাটাইপ থেকে integer এ রূপান্তর
বুলিয়ান থেকে: true হবে 1 এবং false হবে 0।
float থেকে: দশমিক সংখ্যা int এ রূপান্তরের সময় দশমিক অংশ বাদ দেয়া হয়।
string থেকে: যদি একটি স্ট্রিং numeric হয়, তাহলে এটি সমান মানের integer এ রূপান্তরিত হবে। অন্যথায়, এটি 0 হিসেবে গণ্য হবে।
null থেকে: null সবসময় 0 হিসেবে রূপান্তরিত হয়।
গুরুত্বপূর্ণ সতর্কতা
NaN, Inf, এবং -Inf সবসময় 0 হিসাবে গণ্য হয়।
অনির্দিষ্ট দশমিক সংখ্যা int এ কাস্ট করা হলে ভিন্ন ফলাফল আসতে পারে, যা অনুমান করা কঠিন।

<?php
echo (int) ( (0.1 + 0.7) * 10 ); // এটি 8 না হয়ে 7 প্রদর্শন করবে!
?>
এই কারণে float থেকে int এ কাস্ট করার সময় সতর্ক থাকা উচিত।




Integer এর আকার এবং সীমা
৩২-বিট সিস্টেমে (32-bit system):

৩২-বিট সিস্টেমে integer-এর সর্বোচ্চ মান প্রায় ২ বিলিয়ন।
এটি গণনা করা হয় 
2
31
−
1
=
2147483647
2 
31
 −1=2147483647 হিসেবে।
এই মানটি signed integer হিসেবে ধরা হয়, অর্থাৎ এই সিস্টেমে integer সংখ্যা ঋণাত্মক এবং ধনাত্মক উভয় হতে পারে।
এর মানে ৩২-বিট সিস্টেমে integer-এর সীমা হবে -২,১৪৭,৪৮৩,৬৪৮ থেকে +২,১৪৭,৪৮৩,৬৪৭ পর্যন্ত।
৬৪-বিট সিস্টেমে (64-bit system):

৬৪-বিট সিস্টেমে integer-এর সর্বোচ্চ মান প্রায় ৯ কোয়াড্রিলিয়ন।
এটি গণনা করা হয় 
2
63
−
1
=
9223372036854775807
2 
63
 −1=9223372036854775807 হিসেবে।
এর মানে ৬৪-বিট সিস্টেমে integer-এর সীমা হবে -৯,২২৩,৩৭২,০৩৬,৮৫৪,৭৭৫,৮০৮ থেকে +৯,২২৩,৩৭২,০৩৬,৮৫৪,৭৭৫,৮০৭ পর্যন্ত।
PHP এর কনস্ট্যান্টস
PHP-তে integer-এর সীমা জানা যায় কিছু নির্দিষ্ট কনস্ট্যান্টস ব্যবহার করে:

PHP_INT_MAX: integer এর সর্বোচ্চ মান।
PHP_INT_MIN: integer এর সর্বনিম্ন মান (যদি signed integer হয়)।
PHP_INT_SIZE: integer-এর আকার, যা বলে দেয় কত bytes integer-এ ব্যবহার করা হয়।










*/ 